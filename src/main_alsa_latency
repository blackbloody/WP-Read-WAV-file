void ReaderWav::onDemo(IReaderWav* cc) {
    
    struct stat fileInfo;
    uint8_t* addr;
    std::string file_name = "/home/venom/Downloads/Doremifasolasido.wav";
    const char* fileName = file_name.c_str();
    int fd = open(fileName, O_RDONLY);
    posix_fadvise(fd, 0, 0, 1);
    fstat(fd, &fileInfo);
    addr = static_cast<uint8_t*>(mmap(NULL, fileInfo.st_size, PROT_READ, MAP_SHARED, fd, 0));
    size_t length = fileInfo.st_size;
    size_t offset = 0;
    WAV obj = setWAV(addr, offset);
    ///////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////
    
    int pcm;
    snd_pcm_t *handler;
    
    if ((pcm = snd_pcm_open(&handler, PCM_DEVICE, SND_PCM_STREAM_PLAYBACK, 0))< 0) {
        std::cout << "PLAYBACK OPEN ERROR: " << snd_strerror(pcm) << "\n";
        return;
    }
    
    unsigned int channels = obj.channel;
    unsigned int sampleRate = obj.sample_rate;
    int isResampling = 1;
    //unsigned int latency_duration_milis = 3604897959;
    unsigned int latency_duration_milis = 1000000000;
    //unsigned int latency_duration_milis = 3604000;
    //unsigned int latency_duration_milis = 3604897;
    //unsigned int latency_duration_milis = 3000000;
    
    if ((pcm = snd_pcm_set_params(handler, SND_PCM_FORMAT_S16, SND_PCM_ACCESS_RW_INTERLEAVED, 
        channels, sampleRate, isResampling, latency_duration_milis)) < 0)
            std::cout << "cannot set sound parameter" << "\n";
            
    snd_pcm_uframes_t frames, count;
    snd_pcm_uframes_t bufsize, period_size;
    frames = 0;
    count = 0;
    count = obj.offset_first_sample;
    
    snd_pcm_prepare(handler);
    
    snd_pcm_get_params(handler, &bufsize, &period_size);
    do {
        
        size_t remaining = length - count;
        int bufLen = remaining < bufsize ? remaining : bufsize;
        
        frames = snd_pcm_writei(handler, addr + count, obj.bytes_per_sample());
        std::cout << "Offset: " << count << "\n";
        std::cout << "Buffer Size: " << bufLen << "\n";
        std::cout << "Frames: " << frames << "\n";
        if (frames == -EPIPE) {
            snd_pcm_prepare(handler);
        }
        if (frames < 0)
            frames = snd_pcm_recover(handler, frames, 0);
        if (frames < 0) {
            std::cout << "Error: " << snd_strerror(frames);
            //break;
        }
        count += frames;
        
    } while (count < length);    
    
    snd_pcm_drain(handler);
    snd_pcm_close(handler);
    
    ///////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////
    if (munmap(addr, fileInfo.st_size) == -1) {
        close(fd);
    }
    close(fd);
}
